{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport { generatePrivate, getPublic, decrypt } from '@toruslabs/eccrypto';\nimport { post, generateJsonRPCObject, get, setAPIKey, setEmbedHost } from '@toruslabs/http-helpers';\nimport BN from 'bn.js';\nimport { ec } from 'elliptic';\nimport JsonStringify from 'json-stable-stringify';\nimport { keccak256, toChecksumAddress } from 'web3-utils';\nimport loglevel from 'loglevel';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _wrapNativeSuper from '@babel/runtime/helpers/wrapNativeSuper';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nvar log = loglevel.getLogger('torus.js');\nlog.disableAll();\n\nfunction _createSuper$1(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar SomeError = /*#__PURE__*/function (_Error) {\n  _inherits(SomeError, _Error);\n\n  var _super = _createSuper$1(SomeError);\n\n  function SomeError(_ref) {\n    var _this;\n\n    var errors = _ref.errors,\n        responses = _ref.responses,\n        predicate = _ref.predicate;\n\n    _classCallCheck(this, SomeError);\n\n    _this = _super.call(this, 'Unable to resolve enough promises.');\n    _this.errors = errors;\n    _this.responses = responses;\n    _this.predicate = predicate;\n    return _this;\n  }\n\n  return _createClass(SomeError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar Some = function Some(promises, predicate) {\n  return new Promise(function (resolve, reject) {\n    var finishedCount = 0;\n    var sharedState = {\n      resolved: false\n    };\n    var errorArr = new Array(promises.length).fill(undefined);\n    var resultArr = new Array(promises.length).fill(undefined);\n    var predicateError;\n    promises.forEach(function (x, index) {\n      x.then(function (resp) {\n        resultArr[index] = resp;\n        return undefined;\n      }).catch(function (error) {\n        errorArr[index] = error;\n      }).finally(function () {\n        if (sharedState.resolved) return;\n        predicate(resultArr.slice(0), sharedState).then(function (data) {\n          sharedState.resolved = true;\n          resolve(data);\n          return undefined;\n        }).catch(function (error) {\n          // log only the last predicate error\n          predicateError = error;\n        }).finally(function (_) {\n          finishedCount += 1;\n\n          if (finishedCount === promises.length) {\n            var errors = Object.values(resultArr.reduce(function (acc, z) {\n              var _error$data;\n\n              var _ref2 = z || {},\n                  id = _ref2.id,\n                  error = _ref2.error;\n\n              if ((error === null || error === void 0 ? void 0 : (_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.length) > 0) {\n                if (error.data.startsWith('Error occurred while verifying params')) acc[id] = capitalizeFirstLetter(error.data);else acc[id] = error.data;\n              }\n\n              return acc;\n            }, {}));\n\n            if (errors.length > 0) {\n              // Format-able errors\n              var msg = errors.length > 1 ? \"\\n\".concat(errors.map(function (it) {\n                return \"\\u2022 \".concat(it);\n              }).join('\\n')) : errors[0];\n              reject(new Error(msg));\n            } else {\n              var _predicateError;\n\n              reject(new SomeError({\n                errors: errorArr,\n                responses: resultArr,\n                predicate: ((_predicateError = predicateError) === null || _predicateError === void 0 ? void 0 : _predicateError.message) || predicateError\n              }));\n            }\n          }\n        });\n      });\n    });\n  });\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar GetOrSetNonceError = /*#__PURE__*/function (_Error) {\n  _inherits(GetOrSetNonceError, _Error);\n\n  var _super = _createSuper(GetOrSetNonceError);\n\n  function GetOrSetNonceError() {\n    _classCallCheck(this, GetOrSetNonceError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(GetOrSetNonceError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar kCombinations = function kCombinations(s, k) {\n  var set = s;\n\n  if (typeof set === 'number') {\n    set = Array.from({\n      length: set\n    }, function (_, i) {\n      return i;\n    });\n  }\n\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n\n  if (k === set.length) {\n    return [set];\n  }\n\n  if (k === 1) {\n    return set.reduce(function (acc, cur) {\n      return [].concat(_toConsumableArray(acc), [[cur]]);\n    }, []);\n  }\n\n  var combs = [];\n  var tailCombs = [];\n\n  for (var i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n\n    for (var j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i]].concat(_toConsumableArray(tailCombs[j])));\n    }\n  }\n\n  return combs;\n};\n\nvar thresholdSame = function thresholdSame(arr, t) {\n  var hashMap = {};\n\n  for (var i = 0; i < arr.length; i += 1) {\n    var str = JsonStringify(arr[i]);\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;\n\n    if (hashMap[str] === t) {\n      return arr[i];\n    }\n  }\n\n  return undefined;\n};\n\nvar keyLookup = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(endpoints, verifier, verifierId) {\n    var lookupPromises;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            lookupPromises = endpoints.map(function (x) {\n              return post(x, generateJsonRPCObject('VerifierLookupRequest', {\n                verifier: verifier,\n                verifier_id: verifierId.toString()\n              })).catch(function (err) {\n                return log.error('lookup request failed', err);\n              });\n            });\n            return _context.abrupt(\"return\", Some(lookupPromises, function (lookupResults) {\n              var lookupShares = lookupResults.filter(function (x1) {\n                return x1;\n              });\n              var errorResult = thresholdSame(lookupShares.map(function (x2) {\n                return x2 && x2.error;\n              }), ~~(endpoints.length / 2) + 1);\n              var keyResult = thresholdSame(lookupShares.map(function (x3) {\n                return x3 && x3.result;\n              }), ~~(endpoints.length / 2) + 1);\n\n              if (keyResult || errorResult) {\n                return Promise.resolve({\n                  keyResult: keyResult,\n                  errorResult: errorResult\n                });\n              }\n\n              return Promise.reject(new Error(\"invalid results \".concat(JSON.stringify(lookupResults))));\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function keyLookup(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar waitKeyLookup = function waitKeyLookup(endpoints, verifier, verifierId, timeout) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject);\n    }, timeout);\n  });\n};\n\nvar keyAssign = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n    var endpoints, torusNodePubs, lastPoint, firstPoint, verifier, verifierId, signerHost, nodeNum, initialPoint, data, signedData, acceptedErrorMsgs;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            endpoints = _ref2.endpoints, torusNodePubs = _ref2.torusNodePubs, lastPoint = _ref2.lastPoint, firstPoint = _ref2.firstPoint, verifier = _ref2.verifier, verifierId = _ref2.verifierId, signerHost = _ref2.signerHost;\n\n            if (lastPoint === undefined) {\n              nodeNum = Math.floor(Math.random() * endpoints.length);\n              initialPoint = nodeNum;\n            } else {\n              nodeNum = lastPoint % endpoints.length;\n            }\n\n            if (!(nodeNum === firstPoint)) {\n              _context2.next = 4;\n              break;\n            }\n\n            throw new Error('Looped through all');\n\n          case 4:\n            if (firstPoint !== undefined) initialPoint = firstPoint;\n            data = generateJsonRPCObject('KeyAssign', {\n              verifier: verifier,\n              verifier_id: verifierId.toString()\n            });\n            _context2.prev = 6;\n            _context2.next = 9;\n            return post(signerHost, data, {\n              headers: {\n                pubKeyX: torusNodePubs[nodeNum].X,\n                pubKeyY: torusNodePubs[nodeNum].Y\n              }\n            }, {\n              useAPIKey: true\n            });\n\n          case 9:\n            signedData = _context2.sent;\n            return _context2.abrupt(\"return\", post(endpoints[nodeNum], _objectSpread$1(_objectSpread$1({}, data), signedData), {\n              headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n              }\n            }));\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](6);\n            log.error(_context2.t0);\n            acceptedErrorMsgs = [// Slow node\n            'Timed out', // Happens when the node is not reachable (dns issue etc)\n            'TypeError: Failed to fetch', // All except iOS and Firefox\n            'TypeError: cancelled', // iOS\n            'TypeError: NetworkError when attempting to fetch resource.' // Firefox\n            ];\n\n            if (!acceptedErrorMsgs.includes(_context2.t0.message)) {\n              _context2.next = 19;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", keyAssign({\n              endpoints: endpoints,\n              torusNodePubs: torusNodePubs,\n              lastPoint: nodeNum + 1,\n              firstPoint: initialPoint,\n              verifier: verifier,\n              verifierId: verifierId,\n              signerHost: signerHost\n            }));\n\n          case 19:\n            throw new Error(\"Sorry, the Torus Network that powers Web3Auth is currently very busy.\\n    We will generate your key in time. Pls try again later. \\n\\n    \".concat(_context2.t0.message || ''));\n\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[6, 13]]);\n  }));\n\n  return function keyAssign(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n} // of Torus nodes to handle malicious node responses\n\n\nvar Torus = /*#__PURE__*/function () {\n  function Torus() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$enableOneKey = _ref.enableOneKey,\n        enableOneKey = _ref$enableOneKey === void 0 ? false : _ref$enableOneKey,\n        _ref$metadataHost = _ref.metadataHost,\n        metadataHost = _ref$metadataHost === void 0 ? 'https://metadata.tor.us' : _ref$metadataHost,\n        _ref$allowHost = _ref.allowHost,\n        allowHost = _ref$allowHost === void 0 ? 'https://signer.tor.us/api/allow' : _ref$allowHost,\n        _ref$signerHost = _ref.signerHost,\n        signerHost = _ref$signerHost === void 0 ? 'https://signer.tor.us/api/sign' : _ref$signerHost,\n        _ref$serverTimeOffset = _ref.serverTimeOffset,\n        serverTimeOffset = _ref$serverTimeOffset === void 0 ? 0 : _ref$serverTimeOffset;\n\n    _classCallCheck(this, Torus);\n\n    this.ec = new ec('secp256k1');\n    this.metadataHost = metadataHost;\n    this.allowHost = allowHost;\n    this.enableOneKey = enableOneKey;\n    this.serverTimeOffset = serverTimeOffset || 0; // ms\n\n    this.signerHost = signerHost;\n  }\n\n  _createClass(Torus, [{\n    key: \"getUserTypeAndAddress\",\n    value:\n    /**\n     * Note: use this function only for openlogin tkey account lookups.\n     */\n    function () {\n      var _getUserTypeAndAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(endpoints, torusNodePubs, _ref2) {\n        var verifier,\n            verifierId,\n            doesKeyAssign,\n            _ref3,\n            keyResult,\n            errorResult,\n            isNewKey,\n            finalKeyResult,\n            assignResult,\n            _finalKeyResult$keys$,\n            X,\n            Y,\n            typeOfUser,\n            nonce,\n            pubNonce,\n            modifiedPubKey,\n            upgraded,\n            _yield$this$getOrSetN,\n            finalX,\n            finalY,\n            address,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                verifier = _ref2.verifier, verifierId = _ref2.verifierId;\n                doesKeyAssign = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;\n                _context.next = 4;\n                return keyLookup(endpoints, verifier, verifierId);\n\n              case 4:\n                _context.t0 = _context.sent;\n\n                if (_context.t0) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.t0 = {};\n\n              case 7:\n                _ref3 = _context.t0;\n                keyResult = _ref3.keyResult;\n                errorResult = _ref3.errorResult;\n                isNewKey = false;\n\n                if (!(errorResult && JSON.stringify(errorResult).includes('Verifier + VerifierID has not yet been assigned'))) {\n                  _context.next = 26;\n                  break;\n                }\n\n                if (doesKeyAssign) {\n                  _context.next = 14;\n                  break;\n                }\n\n                throw new Error('Verifier + VerifierID has not yet been assigned');\n\n              case 14:\n                _context.next = 16;\n                return keyAssign({\n                  endpoints: endpoints,\n                  torusNodePubs: torusNodePubs,\n                  lastPoint: undefined,\n                  firstPoint: undefined,\n                  verifier: verifier,\n                  verifierId: verifierId,\n                  signerHost: this.signerHost\n                });\n\n              case 16:\n                _context.next = 18;\n                return waitKeyLookup(endpoints, verifier, verifierId, 1000);\n\n              case 18:\n                _context.t1 = _context.sent;\n\n                if (_context.t1) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.t1 = {};\n\n              case 21:\n                assignResult = _context.t1;\n                finalKeyResult = assignResult.keyResult;\n                isNewKey = true;\n                _context.next = 31;\n                break;\n\n              case 26:\n                if (!keyResult) {\n                  _context.next = 30;\n                  break;\n                }\n\n                finalKeyResult = keyResult;\n                _context.next = 31;\n                break;\n\n              case 30:\n                throw new Error(\"node results do not match at first lookup \".concat(JSON.stringify(keyResult || {}), \", \").concat(JSON.stringify(errorResult || {})));\n\n              case 31:\n                if (!finalKeyResult) {\n                  _context.next = 61;\n                  break;\n                }\n\n                _finalKeyResult$keys$ = finalKeyResult.keys[0], X = _finalKeyResult$keys$.pub_key_X, Y = _finalKeyResult$keys$.pub_key_Y;\n                _context.prev = 33;\n                _context.next = 37;\n                return this.getOrSetNonce(X, Y, undefined, !isNewKey);\n\n              case 37:\n                _yield$this$getOrSetN = _context.sent;\n                typeOfUser = _yield$this$getOrSetN.typeOfUser;\n                nonce = _yield$this$getOrSetN.nonce;\n                pubNonce = _yield$this$getOrSetN.pubNonce;\n                upgraded = _yield$this$getOrSetN.upgraded;\n                nonce = new BN(nonce || '0', 16);\n                _context.next = 48;\n                break;\n\n              case 45:\n                _context.prev = 45;\n                _context.t2 = _context[\"catch\"](33);\n                throw new GetOrSetNonceError();\n\n              case 48:\n                if (!(typeOfUser === 'v1')) {\n                  _context.next = 52;\n                  break;\n                }\n\n                modifiedPubKey = this.ec.keyFromPublic({\n                  x: X.toString(16),\n                  y: Y.toString(16)\n                }).getPublic().add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n                _context.next = 57;\n                break;\n\n              case 52:\n                if (!(typeOfUser === 'v2')) {\n                  _context.next = 56;\n                  break;\n                }\n\n                modifiedPubKey = this.ec.keyFromPublic({\n                  x: X.toString(16),\n                  y: Y.toString(16)\n                }).getPublic().add(this.ec.keyFromPublic({\n                  x: pubNonce.x,\n                  y: pubNonce.y\n                }).getPublic());\n                _context.next = 57;\n                break;\n\n              case 56:\n                throw new Error('getOrSetNonce should always return typeOfUser.');\n\n              case 57:\n                finalX = modifiedPubKey.getX().toString(16);\n                finalY = modifiedPubKey.getY().toString(16);\n                address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n                return _context.abrupt(\"return\", {\n                  typeOfUser: typeOfUser,\n                  nonce: nonce,\n                  pubNonce: pubNonce,\n                  upgraded: upgraded,\n                  X: finalX,\n                  Y: finalY,\n                  address: address\n                });\n\n              case 61:\n                throw new Error(\"node results do not match at final lookup \".concat(JSON.stringify(keyResult || {}), \", \").concat(JSON.stringify(errorResult || {})));\n\n              case 62:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[33, 45]]);\n      }));\n\n      function getUserTypeAndAddress(_x, _x2, _x3) {\n        return _getUserTypeAndAddress.apply(this, arguments);\n      }\n\n      return getUserTypeAndAddress;\n    }()\n  }, {\n    key: \"setCustomKey\",\n    value: function () {\n      var _setCustomKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref4) {\n        var privKeyHex, metadataNonce, torusKeyHex, customKeyHex, torusKey, privKey, customKey, newMetadataNonce, data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                privKeyHex = _ref4.privKeyHex, metadataNonce = _ref4.metadataNonce, torusKeyHex = _ref4.torusKeyHex, customKeyHex = _ref4.customKeyHex;\n\n                if (torusKeyHex) {\n                  torusKey = new BN(torusKeyHex, 16);\n                } else {\n                  privKey = new BN(privKeyHex, 16);\n                  torusKey = privKey.sub(metadataNonce).umod(this.ec.curve.n);\n                }\n\n                customKey = new BN(customKeyHex, 16);\n                newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n);\n                data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey.toString(16));\n                _context2.next = 7;\n                return this.setMetadata(data);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setCustomKey(_x4) {\n        return _setCustomKey.apply(this, arguments);\n      }\n\n      return setCustomKey;\n    }()\n  }, {\n    key: \"retrieveShares\",\n    value: function () {\n      var _retrieveShares = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(endpoints, indexes, verifier, verifierParams, idToken) {\n        var _this = this;\n\n        var extraParams,\n            promiseArr,\n            tmpKey,\n            pubKey,\n            pubKeyX,\n            pubKeyY,\n            tokenCommitment,\n            i,\n            p,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                extraParams = _args5.length > 5 && _args5[5] !== undefined ? _args5[5] : {};\n                promiseArr = [];\n                _context5.next = 4;\n                return get(this.allowHost, {\n                  headers: {\n                    verifier: verifier,\n                    verifier_id: verifierParams.verifier_id\n                  }\n                }, {\n                  useAPIKey: true\n                });\n\n              case 4:\n                /*\n                  CommitmentRequestParams struct {\n                    MessagePrefix      string `json:\"messageprefix\"`\n                    TokenCommitment    string `json:\"tokencommitment\"`\n                    TempPubX           string `json:\"temppubx\"`\n                    TempPubY           string `json:\"temppuby\"`\n                    VerifierIdentifier string `json:\"verifieridentifier\"`\n                  } \n                  */\n                // generate temporary private and public key that is used to secure receive shares\n                tmpKey = generatePrivate();\n                pubKey = getPublic(tmpKey).toString('hex');\n                pubKeyX = pubKey.slice(2, 66);\n                pubKeyY = pubKey.slice(66);\n                tokenCommitment = keccak256(idToken); // make commitment requests to endpoints\n\n                for (i = 0; i < endpoints.length; i += 1) {\n                  p = post(endpoints[i], generateJsonRPCObject('CommitmentRequest', {\n                    messageprefix: 'mug00',\n                    tokencommitment: tokenCommitment.slice(2),\n                    temppubx: pubKeyX,\n                    temppuby: pubKeyY,\n                    verifieridentifier: verifier\n                  })).catch(function (err) {\n                    return log.error('commitment', err);\n                  });\n                  promiseArr.push(p);\n                }\n                /*\n                  ShareRequestParams struct {\n                    Item []bijson.RawMessage `json:\"item\"`\n                  }\n                  ShareRequestItem struct {\n                    IDToken            string          `json:\"idtoken\"`\n                    NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n                    VerifierIdentifier string          `json:\"verifieridentifier\"`\n                  }\n                  NodeSignature struct {\n                    Signature   string\n                    Data        string\n                    NodePubKeyX string\n                    NodePubKeyY string\n                  }\n                  CommitmentRequestResult struct {\n                    Signature string `json:\"signature\"`\n                    Data      string `json:\"data\"`\n                    NodePubX  string `json:\"nodepubx\"`\n                    NodePubY  string `json:\"nodepuby\"`\n                  }\n                  */\n                // send share request once k + t number of commitment requests have completed\n\n\n                return _context5.abrupt(\"return\", Some(promiseArr, function (resultArr) {\n                  var completedRequests = resultArr.filter(function (x) {\n                    if (!x || _typeof(x) !== 'object') {\n                      return false;\n                    }\n\n                    if (x.error) {\n                      return false;\n                    }\n\n                    return true;\n                  });\n\n                  if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n                    return Promise.resolve(resultArr);\n                  }\n\n                  return Promise.reject(new Error(\"invalid \".concat(JSON.stringify(resultArr))));\n                }).then(function (responses) {\n                  var promiseArrRequest = [];\n                  var nodeSigs = [];\n\n                  for (var _i = 0; _i < responses.length; _i += 1) {\n                    if (responses[_i]) nodeSigs.push(responses[_i].result);\n                  }\n\n                  for (var _i2 = 0; _i2 < endpoints.length; _i2 += 1) {\n                    // eslint-disable-next-line promise/no-nesting\n                    var _p = post(endpoints[_i2], generateJsonRPCObject('ShareRequest', {\n                      encrypted: 'yes',\n                      item: [_objectSpread(_objectSpread({}, verifierParams), {}, {\n                        idtoken: idToken,\n                        nodesignatures: nodeSigs,\n                        verifieridentifier: verifier\n                      }, extraParams)]\n                    })).catch(function (err) {\n                      return log.error('share req', err);\n                    });\n\n                    promiseArrRequest.push(_p);\n                  }\n\n                  return Some(promiseArrRequest, /*#__PURE__*/function () {\n                    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(shareResponses, sharedState) {\n                      var completedRequests, thresholdPublicKey, sharePromises, nodeIndex, _i3, metadata, sharesResolved, decryptedShares, allCombis, privateKey, _loop, j, _ret;\n\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              /*\n                                  ShareRequestResult struct {\n                                    Keys []KeyAssignment\n                                  }\n                                          / KeyAssignmentPublic -\n                                  type KeyAssignmentPublic struct {\n                                    Index     big.Int\n                                    PublicKey common.Point\n                                    Threshold int\n                                    Verifiers map[string][]string // Verifier => VerifierID\n                                  }\n                                   // KeyAssignment -\n                                  type KeyAssignment struct {\n                                    KeyAssignmentPublic\n                                    Share big.Int // Or Si\n                                  }\n                                */\n                              // check if threshold number of nodes have returned the same user public key\n                              completedRequests = shareResponses.filter(function (x) {\n                                return x;\n                              });\n                              thresholdPublicKey = thresholdSame(shareResponses.map(function (x) {\n                                return x && x.result && x.result.keys[0].PublicKey;\n                              }), ~~(endpoints.length / 2) + 1); // optimistically run lagrange interpolation once threshold number of shares have been received\n                              // this is matched against the user public key to ensure that shares are consistent\n\n                              if (!(completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey)) {\n                                _context3.next = 25;\n                                break;\n                              }\n\n                              sharePromises = [];\n                              nodeIndex = [];\n\n                              for (_i3 = 0; _i3 < shareResponses.length; _i3 += 1) {\n                                if (shareResponses[_i3] && shareResponses[_i3].result && shareResponses[_i3].result.keys && shareResponses[_i3].result.keys.length > 0) {\n                                  shareResponses[_i3].result.keys.sort(function (a, b) {\n                                    return new BN(a.Index, 16).cmp(new BN(b.Index, 16));\n                                  });\n\n                                  if (shareResponses[_i3].result.keys[0].Metadata) {\n                                    metadata = {\n                                      ephemPublicKey: Buffer.from(shareResponses[_i3].result.keys[0].Metadata.ephemPublicKey, 'hex'),\n                                      iv: Buffer.from(shareResponses[_i3].result.keys[0].Metadata.iv, 'hex'),\n                                      mac: Buffer.from(shareResponses[_i3].result.keys[0].Metadata.mac, 'hex'),\n                                      mode: Buffer.from(shareResponses[_i3].result.keys[0].Metadata.mode, 'hex')\n                                    };\n                                    sharePromises.push( // eslint-disable-next-line promise/no-nesting\n                                    decrypt(tmpKey, _objectSpread(_objectSpread({}, metadata), {}, {\n                                      ciphertext: Buffer.from(atob(shareResponses[_i3].result.keys[0].Share).padStart(64, '0'), 'hex')\n                                    })).catch(function (err) {\n                                      return log.debug('share decryption', err);\n                                    }));\n                                  } else {\n                                    sharePromises.push(Promise.resolve(Buffer.from(shareResponses[_i3].result.keys[0].Share.padStart(64, '0'), 'hex')));\n                                  }\n                                } else {\n                                  sharePromises.push(Promise.resolve(undefined));\n                                }\n\n                                nodeIndex.push(new BN(indexes[_i3], 16));\n                              }\n\n                              _context3.next = 8;\n                              return Promise.all(sharePromises);\n\n                            case 8:\n                              sharesResolved = _context3.sent;\n\n                              if (!sharedState.resolved) {\n                                _context3.next = 11;\n                                break;\n                              }\n\n                              return _context3.abrupt(\"return\", undefined);\n\n                            case 11:\n                              decryptedShares = sharesResolved.reduce(function (acc, curr, index) {\n                                if (curr) acc.push({\n                                  index: nodeIndex[index],\n                                  value: new BN(curr)\n                                });\n                                return acc;\n                              }, []); // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n                              // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n\n                              allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n\n                              _loop = function _loop(j) {\n                                var currentCombi = allCombis[j];\n                                var currentCombiShares = decryptedShares.filter(function (v, index) {\n                                  return currentCombi.includes(index);\n                                });\n                                var shares = currentCombiShares.map(function (x) {\n                                  return x.value;\n                                });\n                                var indices = currentCombiShares.map(function (x) {\n                                  return x.index;\n                                });\n\n                                var derivedPrivateKey = _this.lagrangeInterpolation(shares, indices);\n\n                                var decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), 'hex')).toString('hex');\n                                var decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n                                var decryptedPubKeyY = decryptedPubKey.slice(66);\n\n                                if (new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 && new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0) {\n                                  privateKey = derivedPrivateKey;\n                                  return \"break\";\n                                }\n                              };\n\n                              j = 0;\n\n                            case 15:\n                              if (!(j < allCombis.length)) {\n                                _context3.next = 22;\n                                break;\n                              }\n\n                              _ret = _loop(j);\n\n                              if (!(_ret === \"break\")) {\n                                _context3.next = 19;\n                                break;\n                              }\n\n                              return _context3.abrupt(\"break\", 22);\n\n                            case 19:\n                              j += 1;\n                              _context3.next = 15;\n                              break;\n\n                            case 22:\n                              if (!(privateKey === undefined)) {\n                                _context3.next = 24;\n                                break;\n                              }\n\n                              throw new Error('could not derive private key');\n\n                            case 24:\n                              return _context3.abrupt(\"return\", privateKey);\n\n                            case 25:\n                              throw new Error('invalid');\n\n                            case 26:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n\n                    return function (_x10, _x11) {\n                      return _ref5.apply(this, arguments);\n                    };\n                  }());\n                }).then( /*#__PURE__*/function () {\n                  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(returnedKey) {\n                    var privateKey, decryptedPubKey, decryptedPubKeyX, decryptedPubKeyY, metadataNonce, _yield$_this$getNonce, nonce, ethAddress;\n\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            privateKey = returnedKey;\n                            decryptedPubKey = getPublic(Buffer.from(privateKey.toString(16, 64), 'hex')).toString('hex');\n                            decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n                            decryptedPubKeyY = decryptedPubKey.slice(66);\n\n                            if (!_this.enableOneKey) {\n                              _context4.next = 12;\n                              break;\n                            }\n\n                            _context4.next = 7;\n                            return _this.getNonce(decryptedPubKeyX, decryptedPubKeyY, privateKey);\n\n                          case 7:\n                            _yield$_this$getNonce = _context4.sent;\n                            nonce = _yield$_this$getNonce.nonce;\n                            metadataNonce = new BN(nonce || '0', 16);\n                            _context4.next = 15;\n                            break;\n\n                          case 12:\n                            _context4.next = 14;\n                            return _this.getMetadata({\n                              pub_key_X: decryptedPubKeyX,\n                              pub_key_Y: decryptedPubKeyY\n                            });\n\n                          case 14:\n                            metadataNonce = _context4.sent;\n\n                          case 15:\n                            log.debug('> torus.js/retrieveShares', {\n                              privKey: privateKey.toString(16),\n                              metadataNonce: metadataNonce.toString(16)\n                            });\n                            privateKey = privateKey.add(metadataNonce).umod(_this.ec.curve.n);\n                            ethAddress = _this.generateAddressFromPrivKey(privateKey);\n                            log.debug('> torus.js/retrieveShares', {\n                              ethAddress: ethAddress,\n                              privKey: privateKey.toString(16)\n                            }); // return reconstructed private key and ethereum address\n\n                            return _context4.abrupt(\"return\", {\n                              ethAddress: ethAddress,\n                              privKey: privateKey.toString('hex', 64),\n                              metadataNonce: metadataNonce\n                            });\n\n                          case 20:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n\n                  return function (_x12) {\n                    return _ref6.apply(this, arguments);\n                  };\n                }()));\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function retrieveShares(_x5, _x6, _x7, _x8, _x9) {\n        return _retrieveShares.apply(this, arguments);\n      }\n\n      return retrieveShares;\n    }()\n  }, {\n    key: \"getMetadata\",\n    value: function () {\n      var _getMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(data, options) {\n        var metadataResponse;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return post(\"\".concat(this.metadataHost, \"/get\"), data, options, {\n                  useAPIKey: true\n                });\n\n              case 3:\n                metadataResponse = _context6.sent;\n\n                if (!(!metadataResponse || !metadataResponse.message)) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", new BN(0));\n\n              case 6:\n                return _context6.abrupt(\"return\", new BN(metadataResponse.message, 16));\n\n              case 9:\n                _context6.prev = 9;\n                _context6.t0 = _context6[\"catch\"](0);\n                log.error('get metadata error', _context6.t0);\n                return _context6.abrupt(\"return\", new BN(0));\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 9]]);\n      }));\n\n      function getMetadata(_x13, _x14) {\n        return _getMetadata.apply(this, arguments);\n      }\n\n      return getMetadata;\n    }()\n  }, {\n    key: \"generateMetadataParams\",\n    value: function generateMetadataParams(message, privateKey) {\n      var key = this.ec.keyFromPrivate(privateKey.toString('hex', 64));\n      var setData = {\n        data: message,\n        timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16)\n      };\n      var sig = key.sign(keccak256(JsonStringify(setData)).slice(2));\n      return {\n        pub_key_X: key.getPublic().getX().toString('hex'),\n        pub_key_Y: key.getPublic().getY().toString('hex'),\n        set_data: setData,\n        signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(sig.v).toString(16, 2), 'hex').toString('base64')\n      };\n    }\n  }, {\n    key: \"setMetadata\",\n    value: function () {\n      var _setMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(data, options) {\n        var metadataResponse;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return post(\"\".concat(this.metadataHost, \"/set\"), data, options, {\n                  useAPIKey: true\n                });\n\n              case 3:\n                metadataResponse = _context7.sent;\n                return _context7.abrupt(\"return\", metadataResponse.message);\n\n              case 7:\n                _context7.prev = 7;\n                _context7.t0 = _context7[\"catch\"](0);\n                log.error('set metadata error', _context7.t0);\n                return _context7.abrupt(\"return\", '');\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 7]]);\n      }));\n\n      function setMetadata(_x15, _x16) {\n        return _setMetadata.apply(this, arguments);\n      }\n\n      return setMetadata;\n    }()\n  }, {\n    key: \"lagrangeInterpolation\",\n    value: function lagrangeInterpolation(shares, nodeIndex) {\n      if (shares.length !== nodeIndex.length) {\n        return null;\n      }\n\n      var secret = new BN(0);\n\n      for (var i = 0; i < shares.length; i += 1) {\n        var upper = new BN(1);\n        var lower = new BN(1);\n\n        for (var j = 0; j < shares.length; j += 1) {\n          if (i !== j) {\n            upper = upper.mul(nodeIndex[j].neg());\n            upper = upper.umod(this.ec.curve.n);\n            var temp = nodeIndex[i].sub(nodeIndex[j]);\n            temp = temp.umod(this.ec.curve.n);\n            lower = lower.mul(temp).umod(this.ec.curve.n);\n          }\n        }\n\n        var delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n);\n        delta = delta.mul(shares[i]).umod(this.ec.curve.n);\n        secret = secret.add(delta);\n      }\n\n      return secret.umod(this.ec.curve.n);\n    }\n  }, {\n    key: \"generateAddressFromPrivKey\",\n    value: function generateAddressFromPrivKey(privateKey) {\n      var key = this.ec.keyFromPrivate(privateKey.toString('hex', 64), 'hex');\n      var publicKey = key.getPublic().encode('hex').slice(2);\n      var ethAddressLower = \"0x\".concat(keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38));\n      return toChecksumAddress(ethAddressLower);\n    }\n  }, {\n    key: \"generateAddressFromPubKey\",\n    value: function generateAddressFromPubKey(publicKeyX, publicKeyY) {\n      var key = this.ec.keyFromPublic({\n        x: publicKeyX.toString('hex', 64),\n        y: publicKeyY.toString('hex', 64)\n      });\n      var publicKey = key.getPublic().encode('hex').slice(2);\n      var ethAddressLower = \"0x\".concat(keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38));\n      return toChecksumAddress(ethAddressLower);\n    }\n    /**\n     * Note: use this function only with custom auth, don't use to lookup openlogin accounts.\n     */\n\n  }, {\n    key: \"getPublicAddress\",\n    value: function () {\n      var _getPublicAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(endpoints, torusNodePubs, _ref7) {\n        var verifier,\n            verifierId,\n            isExtended,\n            finalKeyResult,\n            isNewKey,\n            _ref8,\n            keyResult,\n            errorResult,\n            assignResult,\n            _nonce,\n            _finalKeyResult$keys$2,\n            X,\n            Y,\n            typeOfUser,\n            nonce,\n            pubNonce,\n            modifiedPubKey,\n            upgraded,\n            _yield$this$getOrSetN2,\n            address,\n            _args8 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                verifier = _ref7.verifier, verifierId = _ref7.verifierId;\n                isExtended = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : false;\n                log.debug('> torus.js/getPublicAddress', {\n                  endpoints: endpoints,\n                  torusNodePubs: torusNodePubs,\n                  verifier: verifier,\n                  verifierId: verifierId,\n                  isExtended: isExtended\n                });\n                isNewKey = false;\n                _context8.next = 6;\n                return keyLookup(endpoints, verifier, verifierId);\n\n              case 6:\n                _context8.t0 = _context8.sent;\n\n                if (_context8.t0) {\n                  _context8.next = 9;\n                  break;\n                }\n\n                _context8.t0 = {};\n\n              case 9:\n                _ref8 = _context8.t0;\n                keyResult = _ref8.keyResult;\n                errorResult = _ref8.errorResult;\n\n                if (!(errorResult && JSON.stringify(errorResult).includes('Verifier not supported'))) {\n                  _context8.next = 16;\n                  break;\n                }\n\n                throw new Error(\"Verifier not supported. Check if you: \\n\\n      1. Are on the right network (Torus testnet/mainnet) \\n\\n      2. Have setup a verifier on dashboard.web3auth.io?\");\n\n              case 16:\n                if (!(errorResult && JSON.stringify(errorResult).includes('Verifier + VerifierID has not yet been assigned'))) {\n                  _context8.next = 29;\n                  break;\n                }\n\n                _context8.next = 19;\n                return keyAssign({\n                  endpoints: endpoints,\n                  torusNodePubs: torusNodePubs,\n                  lastPoint: undefined,\n                  firstPoint: undefined,\n                  verifier: verifier,\n                  verifierId: verifierId,\n                  signerHost: this.signerHost\n                });\n\n              case 19:\n                _context8.next = 21;\n                return waitKeyLookup(endpoints, verifier, verifierId, 1000);\n\n              case 21:\n                _context8.t1 = _context8.sent;\n\n                if (_context8.t1) {\n                  _context8.next = 24;\n                  break;\n                }\n\n                _context8.t1 = {};\n\n              case 24:\n                assignResult = _context8.t1;\n                finalKeyResult = assignResult.keyResult;\n                isNewKey = true;\n                _context8.next = 34;\n                break;\n\n              case 29:\n                if (!keyResult) {\n                  _context8.next = 33;\n                  break;\n                }\n\n                finalKeyResult = keyResult;\n                _context8.next = 34;\n                break;\n\n              case 33:\n                throw new Error(\"node results do not match at first lookup \".concat(JSON.stringify(keyResult || {}), \", \").concat(JSON.stringify(errorResult || {})));\n\n              case 34:\n                log.debug('> torus.js/getPublicAddress', {\n                  finalKeyResult: finalKeyResult,\n                  isNewKey: isNewKey\n                });\n\n                if (!finalKeyResult) {\n                  _context8.next = 76;\n                  break;\n                }\n\n                _finalKeyResult$keys$2 = finalKeyResult.keys[0], X = _finalKeyResult$keys$2.pub_key_X, Y = _finalKeyResult$keys$2.pub_key_Y;\n\n                if (!this.enableOneKey) {\n                  _context8.next = 64;\n                  break;\n                }\n\n                _context8.prev = 38;\n                _context8.next = 42;\n                return this.getOrSetNonce(X, Y, undefined, !isNewKey);\n\n              case 42:\n                _yield$this$getOrSetN2 = _context8.sent;\n                typeOfUser = _yield$this$getOrSetN2.typeOfUser;\n                nonce = _yield$this$getOrSetN2.nonce;\n                pubNonce = _yield$this$getOrSetN2.pubNonce;\n                upgraded = _yield$this$getOrSetN2.upgraded;\n                nonce = new BN(nonce || '0', 16);\n                _context8.next = 53;\n                break;\n\n              case 50:\n                _context8.prev = 50;\n                _context8.t2 = _context8[\"catch\"](38);\n                throw new GetOrSetNonceError();\n\n              case 53:\n                if (!(typeOfUser === 'v1')) {\n                  _context8.next = 57;\n                  break;\n                }\n\n                modifiedPubKey = this.ec.keyFromPublic({\n                  x: X.toString(16),\n                  y: Y.toString(16)\n                }).getPublic().add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n                _context8.next = 62;\n                break;\n\n              case 57:\n                if (!(typeOfUser === 'v2')) {\n                  _context8.next = 61;\n                  break;\n                }\n\n                if (upgraded) {\n                  // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey\n                  modifiedPubKey = this.ec.keyFromPublic({\n                    x: X.toString(16),\n                    y: Y.toString(16)\n                  }).getPublic();\n                } else {\n                  modifiedPubKey = this.ec.keyFromPublic({\n                    x: X.toString(16),\n                    y: Y.toString(16)\n                  }).getPublic().add(this.ec.keyFromPublic({\n                    x: pubNonce.x,\n                    y: pubNonce.y\n                  }).getPublic());\n                }\n\n                _context8.next = 62;\n                break;\n\n              case 61:\n                throw new Error('getOrSetNonce should always return typeOfUser.');\n\n              case 62:\n                _context8.next = 69;\n                break;\n\n              case 64:\n                typeOfUser = 'v1';\n                _context8.next = 67;\n                return this.getMetadata({\n                  pub_key_X: X,\n                  pub_key_Y: Y\n                });\n\n              case 67:\n                nonce = _context8.sent;\n                modifiedPubKey = this.ec.keyFromPublic({\n                  x: X.toString(16),\n                  y: Y.toString(16)\n                }).getPublic().add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n\n              case 69:\n                X = modifiedPubKey.getX().toString(16);\n                Y = modifiedPubKey.getY().toString(16);\n                address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n                log.debug('> torus.js/getPublicAddress', {\n                  X: X,\n                  Y: Y,\n                  address: address,\n                  typeOfUser: typeOfUser,\n                  nonce: (_nonce = nonce) === null || _nonce === void 0 ? void 0 : _nonce.toString(16),\n                  pubNonce: pubNonce\n                });\n\n                if (isExtended) {\n                  _context8.next = 75;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", address);\n\n              case 75:\n                return _context8.abrupt(\"return\", {\n                  typeOfUser: typeOfUser,\n                  address: address,\n                  X: X,\n                  Y: Y,\n                  metadataNonce: nonce,\n                  pubNonce: pubNonce\n                });\n\n              case 76:\n                throw new Error(\"node results do not match at final lookup \".concat(JSON.stringify(keyResult || {}), \", \").concat(JSON.stringify(errorResult || {})));\n\n              case 77:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[38, 50]]);\n      }));\n\n      function getPublicAddress(_x17, _x18, _x19) {\n        return _getPublicAddress.apply(this, arguments);\n      }\n\n      return getPublicAddress;\n    }()\n    /**\n     * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing\n     */\n\n  }, {\n    key: \"getOrSetNonce\",\n    value: function () {\n      var _getOrSetNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(X, Y, privKey) {\n        var getOnly,\n            data,\n            msg,\n            _args9 = arguments;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                getOnly = _args9.length > 3 && _args9[3] !== undefined ? _args9[3] : false;\n                msg = getOnly ? 'getNonce' : 'getOrSetNonce';\n\n                if (privKey) {\n                  data = this.generateMetadataParams(msg, privKey);\n                } else {\n                  data = {\n                    pub_key_X: X,\n                    pub_key_Y: Y,\n                    set_data: {\n                      data: msg\n                    }\n                  };\n                }\n\n                return _context9.abrupt(\"return\", post(\"\".concat(this.metadataHost, \"/get_or_set_nonce\"), data, undefined, {\n                  useAPIKey: true\n                }));\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getOrSetNonce(_x20, _x21, _x22) {\n        return _getOrSetNonce.apply(this, arguments);\n      }\n\n      return getOrSetNonce;\n    }()\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(X, Y, privKey) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this.getOrSetNonce(X, Y, privKey, true));\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getNonce(_x23, _x24, _x25) {\n        return _getNonce.apply(this, arguments);\n      }\n\n      return getNonce;\n    }()\n  }, {\n    key: \"getPostboxKeyFrom1OutOf1\",\n    value: function getPostboxKeyFrom1OutOf1(privKey, nonce) {\n      var privKeyBN = new BN(privKey, 16);\n      var nonceBN = new BN(nonce, 16);\n      return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString('hex');\n    }\n  }], [{\n    key: \"enableLogging\",\n    value: function enableLogging() {\n      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (v) log.enableAll();else log.disableAll();\n    }\n  }, {\n    key: \"setAPIKey\",\n    value: function setAPIKey$1(apiKey) {\n      setAPIKey(apiKey);\n    }\n  }, {\n    key: \"setEmbedHost\",\n    value: function setEmbedHost$1(embedHost) {\n      setEmbedHost(embedHost);\n    }\n  }, {\n    key: \"isGetOrSetNonceError\",\n    value: function isGetOrSetNonceError(err) {\n      return err instanceof GetOrSetNonceError;\n    }\n  }]);\n\n  return Torus;\n}();\n\nexport { Torus as default, keyAssign, keyLookup, waitKeyLookup };","map":{"version":3,"mappings":"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","names":["log","loglevel","getLogger","disableAll","capitalizeFirstLetter","str","charAt","toUpperCase","slice","SomeError","_inherits","errors","responses","predicate","_classCallCheck","_this","Error","Some","promises","Promise","resolve","reject","finishedCount","sharedState","resolved","errorArr","Array","length","fill","undefined","resultArr","predicateError","forEach","x","index","then","resp","catch","error","finally","data","_","Object","values","reduce","acc","z","id","startsWith","msg","map","it","join","message","GetOrSetNonceError","kCombinations","s","k","set","from","i","cur","combs","tailCombs","j","push","thresholdSame","arr","t","hashMap","JsonStringify","keyLookup","endpoints","verifier","verifierId","lookupPromises","post","generateJsonRPCObject","verifier_id","toString","err","lookupResults","lookupShares","filter","x1","errorResult","x2","keyResult","x3","result","JSON","stringify","waitKeyLookup","timeout","setTimeout","keyAssign","torusNodePubs","lastPoint","firstPoint","signerHost","nodeNum","Math","floor","random","initialPoint","_context2","headers","pubKeyX","X","pubKeyY","Y","useAPIKey","signedData","acceptedErrorMsgs","includes","Torus","enableOneKey","metadataHost","allowHost","serverTimeOffset","ec","EC","doesKeyAssign","_context","_ref3","isNewKey","assignResult","finalKeyResult","_finalKeyResult$keys$","keys","pub_key_X","pub_key_Y","getOrSetNonce","_yield$this$getOrSetN","typeOfUser","nonce","pubNonce","upgraded","BN","modifiedPubKey","keyFromPublic","y","getPublic","add","keyFromPrivate","finalX","getX","finalY","getY","address","generateAddressFromPubKey","privKeyHex","metadataNonce","torusKeyHex","customKeyHex","torusKey","privKey","sub","umod","curve","n","customKey","newMetadataNonce","generateMetadataParams","setMetadata","indexes","verifierParams","idToken","extraParams","promiseArr","_context5","get","tmpKey","generatePrivate","pubKey","tokenCommitment","keccak256","p","messageprefix","tokencommitment","temppubx","temppuby","verifieridentifier","completedRequests","_typeof","promiseArrRequest","nodeSigs","encrypted","item","idtoken","nodesignatures","shareResponses","thresholdPublicKey","PublicKey","_context3","sharePromises","nodeIndex","sort","a","b","Index","cmp","Metadata","metadata","ephemPublicKey","Buffer","iv","mac","mode","decrypt","ciphertext","atob","Share","padStart","debug","all","sharesResolved","decryptedShares","curr","value","allCombis","_loop","currentCombi","currentCombiShares","v","shares","indices","derivedPrivateKey","lagrangeInterpolation","decryptedPubKey","decryptedPubKeyX","decryptedPubKeyY","privateKey","_ret","returnedKey","_context4","getNonce","_yield$_this$getNonce","getMetadata","ethAddress","generateAddressFromPrivKey","options","_context6","metadataResponse","key","setData","timestamp","Date","now","sig","sign","set_data","signature","r","_context7","secret","upper","lower","mul","neg","temp","delta","invm","publicKey","encode","ethAddressLower","toChecksumAddress","publicKeyX","publicKeyY","isExtended","_context8","_ref8","_finalKeyResult$keys$2","_yield$this$getOrSetN2","_nonce","getOnly","privKeyBN","nonceBN","enableAll","apiKey","setAPIKey","embedHost","setEmbedHost"],"sources":["../src/loglevel.js","../src/some.js","../src/utils.js","../src/torus.js"],"sourcesContent":["import loglevel from 'loglevel'\n\nconst log = loglevel.getLogger('torus.js')\nlog.disableAll()\n\nexport default log\n","function capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\nexport class SomeError extends Error {\n  constructor({ errors, responses, predicate }) {\n    super('Unable to resolve enough promises.')\n    this.errors = errors\n    this.responses = responses\n    this.predicate = predicate\n  }\n}\n\nexport const Some = (promises, predicate) =>\n  new Promise((resolve, reject) => {\n    let finishedCount = 0\n    const sharedState = { resolved: false }\n    const errorArr = new Array(promises.length).fill(undefined)\n    const resultArr = new Array(promises.length).fill(undefined)\n    let predicateError\n    promises.forEach((x, index) => {\n      x.then((resp) => {\n        resultArr[index] = resp\n        return undefined\n      })\n        .catch((error) => {\n          errorArr[index] = error\n        })\n        .finally(() => {\n          if (sharedState.resolved) return\n          predicate(resultArr.slice(0), sharedState)\n            .then((data) => {\n              sharedState.resolved = true\n              resolve(data)\n              return undefined\n            })\n            .catch((error) => {\n              // log only the last predicate error\n              predicateError = error\n            })\n            .finally((_) => {\n              finishedCount += 1\n              if (finishedCount === promises.length) {\n                const errors = Object.values(\n                  resultArr.reduce((acc, z) => {\n                    const { id, error } = z || {}\n                    if (error?.data?.length > 0) {\n                      if (error.data.startsWith('Error occurred while verifying params')) acc[id] = capitalizeFirstLetter(error.data)\n                      else acc[id] = error.data\n                    }\n                    return acc\n                  }, {})\n                )\n\n                if (errors.length > 0) {\n                  // Format-able errors\n                  const msg = errors.length > 1 ? `\\n${errors.map((it) => `• ${it}`).join('\\n')}` : errors[0]\n                  reject(new Error(msg))\n                } else {\n                  reject(\n                    new SomeError({\n                      errors: errorArr,\n                      responses: resultArr,\n                      predicate: predicateError?.message || predicateError,\n                    })\n                  )\n                }\n              }\n            })\n        })\n    })\n  })\n","import { generateJsonRPCObject, post } from '@toruslabs/http-helpers'\nimport JsonStringify from 'json-stable-stringify'\n\nimport log from './loglevel'\nimport { Some } from './some'\n\nexport class GetOrSetNonceError extends Error {}\n\nexport const kCombinations = (s, k) => {\n  let set = s\n  if (typeof set === 'number') {\n    set = Array.from({ length: set }, (_, i) => i)\n  }\n  if (k > set.length || k <= 0) {\n    return []\n  }\n\n  if (k === set.length) {\n    return [set]\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], [])\n  }\n\n  const combs = []\n  let tailCombs = []\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1)\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]])\n    }\n  }\n\n  return combs\n}\n\nexport const thresholdSame = (arr, t) => {\n  const hashMap = {}\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = JsonStringify(arr[i])\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1\n    if (hashMap[str] === t) {\n      return arr[i]\n    }\n  }\n  return undefined\n}\n\nexport const keyLookup = async (endpoints, verifier, verifierId) => {\n  const lookupPromises = endpoints.map((x) =>\n    post(\n      x,\n      generateJsonRPCObject('VerifierLookupRequest', {\n        verifier,\n        verifier_id: verifierId.toString(),\n      })\n    ).catch((err) => log.error('lookup request failed', err))\n  )\n  return Some(lookupPromises, (lookupResults) => {\n    const lookupShares = lookupResults.filter((x1) => x1)\n    const errorResult = thresholdSame(\n      lookupShares.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    )\n    const keyResult = thresholdSame(\n      lookupShares.map((x3) => x3 && x3.result),\n      ~~(endpoints.length / 2) + 1\n    )\n    if (keyResult || errorResult) {\n      return Promise.resolve({ keyResult, errorResult })\n    }\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`))\n  })\n}\n\nexport const waitKeyLookup = (endpoints, verifier, verifierId, timeout) =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject)\n    }, timeout)\n  })\n\nexport const keyAssign = async ({ endpoints, torusNodePubs, lastPoint, firstPoint, verifier, verifierId, signerHost }) => {\n  let nodeNum\n  let initialPoint\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length)\n    initialPoint = nodeNum\n  } else {\n    nodeNum = lastPoint % endpoints.length\n  }\n  if (nodeNum === firstPoint) throw new Error('Looped through all')\n  if (firstPoint !== undefined) initialPoint = firstPoint\n\n  const data = generateJsonRPCObject('KeyAssign', {\n    verifier,\n    verifier_id: verifierId.toString(),\n  })\n  try {\n    const signedData = await post(\n      signerHost,\n      data,\n      {\n        headers: {\n          pubKeyX: torusNodePubs[nodeNum].X,\n          pubKeyY: torusNodePubs[nodeNum].Y,\n        },\n      },\n      { useAPIKey: true }\n    )\n    return post(\n      endpoints[nodeNum],\n      { ...data, ...signedData },\n      {\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n        },\n      }\n    )\n  } catch (error) {\n    log.error(error)\n    const acceptedErrorMsgs = [\n      // Slow node\n      'Timed out',\n      // Happens when the node is not reachable (dns issue etc)\n      'TypeError: Failed to fetch', // All except iOS and Firefox\n      'TypeError: cancelled', // iOS\n      'TypeError: NetworkError when attempting to fetch resource.', // Firefox\n    ]\n    if (acceptedErrorMsgs.includes(error.message))\n      return keyAssign({ endpoints, torusNodePubs, lastPoint: nodeNum + 1, firstPoint: initialPoint, verifier, verifierId, signerHost })\n    throw new Error(\n      `Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \\n\n    ${error.message || ''}`\n    )\n  }\n}\n","import { decrypt, generatePrivate, getPublic } from '@toruslabs/eccrypto'\nimport { generateJsonRPCObject, get, post, setAPIKey, setEmbedHost } from '@toruslabs/http-helpers'\nimport BN from 'bn.js'\nimport { ec as EC } from 'elliptic'\nimport stringify from 'json-stable-stringify'\nimport { keccak256, toChecksumAddress } from 'web3-utils'\n\nimport log from './loglevel'\nimport { Some } from './some'\nimport { GetOrSetNonceError, kCombinations, keyAssign, keyLookup, thresholdSame, waitKeyLookup } from './utils'\n\n// Implement threshold logic wrappers around public APIs\n// of Torus nodes to handle malicious node responses\nclass Torus {\n  constructor({\n    enableOneKey = false,\n    metadataHost = 'https://metadata.tor.us',\n    allowHost = 'https://signer.tor.us/api/allow',\n    signerHost = 'https://signer.tor.us/api/sign',\n    serverTimeOffset = 0,\n  } = {}) {\n    this.ec = new EC('secp256k1')\n    this.metadataHost = metadataHost\n    this.allowHost = allowHost\n    this.enableOneKey = enableOneKey\n    this.serverTimeOffset = serverTimeOffset || 0 // ms\n    this.signerHost = signerHost\n  }\n\n  static enableLogging(v = true) {\n    if (v) log.enableAll()\n    else log.disableAll()\n  }\n\n  static setAPIKey(apiKey) {\n    setAPIKey(apiKey)\n  }\n\n  static setEmbedHost(embedHost) {\n    setEmbedHost(embedHost)\n  }\n\n  /**\n   * Note: use this function only for openlogin tkey account lookups.\n   */\n  async getUserTypeAndAddress(endpoints, torusNodePubs, { verifier, verifierId }, doesKeyAssign = false) {\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {}\n    let isNewKey = false\n    let finalKeyResult\n    if (errorResult && JSON.stringify(errorResult).includes('Verifier + VerifierID has not yet been assigned')) {\n      if (!doesKeyAssign) {\n        throw new Error('Verifier + VerifierID has not yet been assigned')\n      }\n      await keyAssign({ endpoints, torusNodePubs, lastPoint: undefined, firstPoint: undefined, verifier, verifierId, signerHost: this.signerHost })\n      const assignResult = (await waitKeyLookup(endpoints, verifier, verifierId, 1000)) || {}\n      finalKeyResult = assignResult.keyResult\n      isNewKey = true\n    } else if (keyResult) {\n      finalKeyResult = keyResult\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n    }\n    if (finalKeyResult) {\n      const { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0]\n      let typeOfUser\n      let nonce\n      let pubNonce\n      let modifiedPubKey\n      let upgraded\n\n      try {\n        ;({ typeOfUser, nonce, pubNonce, upgraded } = await this.getOrSetNonce(X, Y, undefined, !isNewKey))\n        nonce = new BN(nonce || '0', 16)\n      } catch {\n        throw new GetOrSetNonceError()\n      }\n      if (typeOfUser === 'v1') {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic())\n      } else if (typeOfUser === 'v2') {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n          .getPublic()\n          .add(this.ec.keyFromPublic({ x: pubNonce.x, y: pubNonce.y }).getPublic())\n      } else {\n        throw new Error('getOrSetNonce should always return typeOfUser.')\n      }\n      const finalX = modifiedPubKey.getX().toString(16)\n      const finalY = modifiedPubKey.getY().toString(16)\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY())\n      return { typeOfUser, nonce, pubNonce, upgraded, X: finalX, Y: finalY, address }\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n  }\n\n  async setCustomKey({ privKeyHex, metadataNonce, torusKeyHex, customKeyHex }) {\n    let torusKey\n    if (torusKeyHex) {\n      torusKey = new BN(torusKeyHex, 16)\n    } else {\n      const privKey = new BN(privKeyHex, 16)\n      torusKey = privKey.sub(metadataNonce).umod(this.ec.curve.n)\n    }\n    const customKey = new BN(customKeyHex, 16)\n    const newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n)\n    const data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey.toString(16))\n    await this.setMetadata(data)\n  }\n\n  async retrieveShares(endpoints, indexes, verifier, verifierParams, idToken, extraParams = {}) {\n    const promiseArr = []\n    await get(\n      this.allowHost,\n      {\n        headers: {\n          verifier,\n          verifier_id: verifierParams.verifier_id,\n        },\n      },\n      { useAPIKey: true }\n    )\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n\n    // generate temporary private and public key that is used to secure receive shares\n    const tmpKey = generatePrivate()\n    const pubKey = getPublic(tmpKey).toString('hex')\n    const pubKeyX = pubKey.slice(2, 66)\n    const pubKeyY = pubKey.slice(66)\n    const tokenCommitment = keccak256(idToken)\n\n    // make commitment requests to endpoints\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = post(\n        endpoints[i],\n        generateJsonRPCObject('CommitmentRequest', {\n          messageprefix: 'mug00',\n          tokencommitment: tokenCommitment.slice(2),\n          temppubx: pubKeyX,\n          temppuby: pubKeyY,\n          verifieridentifier: verifier,\n        })\n      ).catch((err) => log.error('commitment', err))\n      promiseArr.push(p)\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n    return Some(promiseArr, (resultArr) => {\n      const completedRequests = resultArr.filter((x) => {\n        if (!x || typeof x !== 'object') {\n          return false\n        }\n        if (x.error) {\n          return false\n        }\n        return true\n      })\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr)\n      }\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`))\n    })\n      .then((responses) => {\n        const promiseArrRequest = []\n        const nodeSigs = []\n        for (let i = 0; i < responses.length; i += 1) {\n          if (responses[i]) nodeSigs.push(responses[i].result)\n        }\n        for (let i = 0; i < endpoints.length; i += 1) {\n          // eslint-disable-next-line promise/no-nesting\n          const p = post(\n            endpoints[i],\n            generateJsonRPCObject('ShareRequest', {\n              encrypted: 'yes',\n              item: [{ ...verifierParams, idtoken: idToken, nodesignatures: nodeSigs, verifieridentifier: verifier, ...extraParams }],\n            })\n          ).catch((err) => log.error('share req', err))\n          promiseArrRequest.push(p)\n        }\n        return Some(promiseArrRequest, async (shareResponses, sharedState) => {\n          /*\n              ShareRequestResult struct {\n                Keys []KeyAssignment\n              }\n                      / KeyAssignmentPublic -\n              type KeyAssignmentPublic struct {\n                Index     big.Int\n                PublicKey common.Point\n                Threshold int\n                Verifiers map[string][]string // Verifier => VerifierID\n              }\n\n              // KeyAssignment -\n              type KeyAssignment struct {\n                KeyAssignmentPublic\n                Share big.Int // Or Si\n              }\n            */\n          // check if threshold number of nodes have returned the same user public key\n          const completedRequests = shareResponses.filter((x) => x)\n          const thresholdPublicKey = thresholdSame(\n            shareResponses.map((x) => x && x.result && x.result.keys[0].PublicKey),\n            ~~(endpoints.length / 2) + 1\n          )\n          // optimistically run lagrange interpolation once threshold number of shares have been received\n          // this is matched against the user public key to ensure that shares are consistent\n          if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n            const sharePromises = []\n            const nodeIndex = []\n            for (let i = 0; i < shareResponses.length; i += 1) {\n              if (shareResponses[i] && shareResponses[i].result && shareResponses[i].result.keys && shareResponses[i].result.keys.length > 0) {\n                shareResponses[i].result.keys.sort((a, b) => new BN(a.Index, 16).cmp(new BN(b.Index, 16)))\n                if (shareResponses[i].result.keys[0].Metadata) {\n                  const metadata = {\n                    ephemPublicKey: Buffer.from(shareResponses[i].result.keys[0].Metadata.ephemPublicKey, 'hex'),\n                    iv: Buffer.from(shareResponses[i].result.keys[0].Metadata.iv, 'hex'),\n                    mac: Buffer.from(shareResponses[i].result.keys[0].Metadata.mac, 'hex'),\n                    mode: Buffer.from(shareResponses[i].result.keys[0].Metadata.mode, 'hex'),\n                  }\n                  sharePromises.push(\n                    // eslint-disable-next-line promise/no-nesting\n                    decrypt(tmpKey, {\n                      ...metadata,\n                      ciphertext: Buffer.from(atob(shareResponses[i].result.keys[0].Share).padStart(64, '0'), 'hex'),\n                    }).catch((err) => log.debug('share decryption', err))\n                  )\n                } else {\n                  sharePromises.push(Promise.resolve(Buffer.from(shareResponses[i].result.keys[0].Share.padStart(64, '0'), 'hex')))\n                }\n              } else {\n                sharePromises.push(Promise.resolve(undefined))\n              }\n              nodeIndex.push(new BN(indexes[i], 16))\n            }\n            const sharesResolved = await Promise.all(sharePromises)\n            if (sharedState.resolved) return undefined\n\n            const decryptedShares = sharesResolved.reduce((acc, curr, index) => {\n              if (curr) acc.push({ index: nodeIndex[index], value: new BN(curr) })\n              return acc\n            }, [])\n            // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n            const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1)\n            let privateKey\n            for (let j = 0; j < allCombis.length; j += 1) {\n              const currentCombi = allCombis[j]\n              const currentCombiShares = decryptedShares.filter((v, index) => currentCombi.includes(index))\n              const shares = currentCombiShares.map((x) => x.value)\n              const indices = currentCombiShares.map((x) => x.index)\n              const derivedPrivateKey = this.lagrangeInterpolation(shares, indices)\n              const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), 'hex')).toString('hex')\n              const decryptedPubKeyX = decryptedPubKey.slice(2, 66)\n              const decryptedPubKeyY = decryptedPubKey.slice(66)\n              if (\n                new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n                new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n              ) {\n                privateKey = derivedPrivateKey\n                break\n              }\n            }\n            if (privateKey === undefined) {\n              throw new Error('could not derive private key')\n            }\n            return privateKey\n          }\n          throw new Error('invalid')\n        })\n      })\n      .then(async (returnedKey) => {\n        let privateKey = returnedKey\n        const decryptedPubKey = getPublic(Buffer.from(privateKey.toString(16, 64), 'hex')).toString('hex')\n        const decryptedPubKeyX = decryptedPubKey.slice(2, 66)\n        const decryptedPubKeyY = decryptedPubKey.slice(66)\n        let metadataNonce\n        if (this.enableOneKey) {\n          const { nonce } = await this.getNonce(decryptedPubKeyX, decryptedPubKeyY, privateKey)\n          metadataNonce = new BN(nonce || '0', 16)\n        } else {\n          metadataNonce = await this.getMetadata({ pub_key_X: decryptedPubKeyX, pub_key_Y: decryptedPubKeyY })\n        }\n        log.debug('> torus.js/retrieveShares', { privKey: privateKey.toString(16), metadataNonce: metadataNonce.toString(16) })\n\n        privateKey = privateKey.add(metadataNonce).umod(this.ec.curve.n)\n\n        const ethAddress = this.generateAddressFromPrivKey(privateKey)\n        log.debug('> torus.js/retrieveShares', { ethAddress, privKey: privateKey.toString(16) })\n\n        // return reconstructed private key and ethereum address\n        return {\n          ethAddress,\n          privKey: privateKey.toString('hex', 64),\n          metadataNonce,\n        }\n      })\n  }\n\n  async getMetadata(data, options) {\n    try {\n      const metadataResponse = await post(`${this.metadataHost}/get`, data, options, { useAPIKey: true })\n      if (!metadataResponse || !metadataResponse.message) {\n        return new BN(0)\n      }\n      return new BN(metadataResponse.message, 16) // nonce\n    } catch (error) {\n      log.error('get metadata error', error)\n      return new BN(0)\n    }\n  }\n\n  generateMetadataParams(message, privateKey) {\n    const key = this.ec.keyFromPrivate(privateKey.toString('hex', 64))\n    const setData = {\n      data: message,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16),\n    }\n    const sig = key.sign(keccak256(stringify(setData)).slice(2))\n    return {\n      pub_key_X: key.getPublic().getX().toString('hex'),\n      pub_key_Y: key.getPublic().getY().toString('hex'),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(sig.v).toString(16, 2), 'hex').toString('base64'),\n    }\n  }\n\n  async setMetadata(data, options) {\n    try {\n      const metadataResponse = await post(`${this.metadataHost}/set`, data, options, { useAPIKey: true })\n      return metadataResponse.message // IPFS hash\n    } catch (error) {\n      log.error('set metadata error', error)\n      return ''\n    }\n  }\n\n  lagrangeInterpolation(shares, nodeIndex) {\n    if (shares.length !== nodeIndex.length) {\n      return null\n    }\n    let secret = new BN(0)\n    for (let i = 0; i < shares.length; i += 1) {\n      let upper = new BN(1)\n      let lower = new BN(1)\n      for (let j = 0; j < shares.length; j += 1) {\n        if (i !== j) {\n          upper = upper.mul(nodeIndex[j].neg())\n          upper = upper.umod(this.ec.curve.n)\n          let temp = nodeIndex[i].sub(nodeIndex[j])\n          temp = temp.umod(this.ec.curve.n)\n          lower = lower.mul(temp).umod(this.ec.curve.n)\n        }\n      }\n      let delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n)\n      delta = delta.mul(shares[i]).umod(this.ec.curve.n)\n      secret = secret.add(delta)\n    }\n    return secret.umod(this.ec.curve.n)\n  }\n\n  generateAddressFromPrivKey(privateKey) {\n    const key = this.ec.keyFromPrivate(privateKey.toString('hex', 64), 'hex')\n    const publicKey = key.getPublic().encode('hex').slice(2)\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38)}`\n    return toChecksumAddress(ethAddressLower)\n  }\n\n  generateAddressFromPubKey(publicKeyX, publicKeyY) {\n    const key = this.ec.keyFromPublic({ x: publicKeyX.toString('hex', 64), y: publicKeyY.toString('hex', 64) })\n    const publicKey = key.getPublic().encode('hex').slice(2)\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38)}`\n    return toChecksumAddress(ethAddressLower)\n  }\n\n  /**\n   * Note: use this function only with custom auth, don't use to lookup openlogin accounts.\n   */\n  async getPublicAddress(endpoints, torusNodePubs, { verifier, verifierId }, isExtended = false) {\n    log.debug('> torus.js/getPublicAddress', { endpoints, torusNodePubs, verifier, verifierId, isExtended })\n\n    let finalKeyResult\n    let isNewKey = false\n\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {}\n    if (errorResult && JSON.stringify(errorResult).includes('Verifier not supported')) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`)\n    } else if (errorResult && JSON.stringify(errorResult).includes('Verifier + VerifierID has not yet been assigned')) {\n      await keyAssign({ endpoints, torusNodePubs, lastPoint: undefined, firstPoint: undefined, verifier, verifierId, signerHost: this.signerHost })\n      const assignResult = (await waitKeyLookup(endpoints, verifier, verifierId, 1000)) || {}\n      finalKeyResult = assignResult.keyResult\n      isNewKey = true\n    } else if (keyResult) {\n      finalKeyResult = keyResult\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n    }\n    log.debug('> torus.js/getPublicAddress', { finalKeyResult, isNewKey })\n\n    if (finalKeyResult) {\n      let { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0]\n      let typeOfUser\n      let nonce\n      let pubNonce\n      let modifiedPubKey\n      if (this.enableOneKey) {\n        let upgraded\n        try {\n          ;({ typeOfUser, nonce, pubNonce, upgraded } = await this.getOrSetNonce(X, Y, undefined, !isNewKey))\n          nonce = new BN(nonce || '0', 16)\n        } catch {\n          throw new GetOrSetNonceError()\n        }\n        if (typeOfUser === 'v1') {\n          modifiedPubKey = this.ec\n            .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n            .getPublic()\n            .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic())\n        } else if (typeOfUser === 'v2') {\n          if (upgraded) {\n            // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey\n            modifiedPubKey = this.ec.keyFromPublic({ x: X.toString(16), y: Y.toString(16) }).getPublic()\n          } else {\n            modifiedPubKey = this.ec\n              .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n              .getPublic()\n              .add(this.ec.keyFromPublic({ x: pubNonce.x, y: pubNonce.y }).getPublic())\n          }\n        } else {\n          throw new Error('getOrSetNonce should always return typeOfUser.')\n        }\n      } else {\n        typeOfUser = 'v1'\n        nonce = await this.getMetadata({ pub_key_X: X, pub_key_Y: Y })\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic())\n      }\n\n      X = modifiedPubKey.getX().toString(16)\n      Y = modifiedPubKey.getY().toString(16)\n\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY())\n      log.debug('> torus.js/getPublicAddress', { X, Y, address, typeOfUser, nonce: nonce?.toString(16), pubNonce })\n\n      if (!isExtended) return address\n      return {\n        typeOfUser,\n        address,\n        X,\n        Y,\n        metadataNonce: nonce,\n        pubNonce,\n      }\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n  }\n\n  /**\n   * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing\n   */\n\n  static isGetOrSetNonceError(err) {\n    return err instanceof GetOrSetNonceError\n  }\n\n  async getOrSetNonce(X, Y, privKey, getOnly = false) {\n    let data\n    const msg = getOnly ? 'getNonce' : 'getOrSetNonce'\n    if (privKey) {\n      data = this.generateMetadataParams(msg, privKey)\n    } else {\n      data = {\n        pub_key_X: X,\n        pub_key_Y: Y,\n        set_data: { data: msg },\n      }\n    }\n    return post(`${this.metadataHost}/get_or_set_nonce`, data, undefined, { useAPIKey: true })\n  }\n\n  async getNonce(X, Y, privKey) {\n    return this.getOrSetNonce(X, Y, privKey, true)\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey, nonce) {\n    const privKeyBN = new BN(privKey, 16)\n    const nonceBN = new BN(nonce, 16)\n    return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString('hex')\n  }\n}\n\nexport default Torus\n"]},"metadata":{},"sourceType":"module"}